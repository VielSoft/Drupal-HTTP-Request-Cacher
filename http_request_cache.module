<?php
/**
 * @file
 * http_request_cache.module
 *
 * Shows how to create a wrapper around drupal_http_request() that implements
 * both static and database caching. It also adds a hook to allow modules the
 * ability to adjust if something gets cached.
 */

/**
 * Custom drupal_http_request() wrapper that implements caching.
 *
 * @see drupal_http_request()
 */
function http_request_cache_http_request($url, array $options = array()) {

  $args = func_get_args();
  $key = __FUNCTION__ . serialize($args);
  $cid = hash('sha512', drupal_get_hash_salt() . $key);

  print_r($cid);

  // Skip POST requests no matter what.
  $is_cacheable = empty($options['method']) || drupal_strtoupper($options['method']) != 'POST';

  // Allow modules to adjust cacheable status.
  if ($is_cacheable) {

    $context = array(
      'url' => $url,
      'options' => $options,
    );
    drupal_alter('http_request_is_cacheable', $is_cacheable, $context);
  }

  $result = NULL;

  if ($is_cacheable) {

    $result = &drupal_static($cid);
    // See if we have a static cached result so we can avoid the db completely.
    if (!empty($result)) {

      return $result;
    }
    // Check for a cached version of this request in the db.
    elseif($cache = cache_get($cid, 'cache_page')) {

      // Assign to our static cache before returning result.
      $result = $cache->data;
      return $result;
    }
  }

  // We need to remove our drupal_http_request() override so it doesn't result
  // in an infinite recursion scenario. We then need to restore our custom
  // setting after the call is complete.
  global $conf;
  $original_function = $conf['drupal_http_request_function'];
  $conf['drupal_http_request_function'] = FALSE;
  $result = call_user_func_array('drupal_http_request', $args);
  $conf['drupal_http_request_function'] = $original_function;

  if ($is_cacheable) {

    // Be sure to save this request so we can avoid it in the future.
    cache_set($cid, $result, 'cache_page');
  }

  return $result;
}

/**
 * Implements hook_init().
 */
function http_request_cache_init() {
  // Use our custom function only after the module is loaded.
  global $conf;
  $conf['drupal_http_request_function'] = 'http_request_cache_http_request';
}

/**
 * Implements hook_http_request_is_cacheable_alter().
 */
function http_request_cache_http_request_is_cacheable_alter(&$is_cacheable, $context) {
  // Try and limit to only Solr requests to minimize possible issues.
  $is_cacheable &= strpos($context['url'], '/solr/') !== FALSE;
}
